class Pizza:
    def __init__(self, pizza_code, toppings, size, unit_price):
        self.pizza_code = pizza_code
        self.toppings = toppings
        self.size = size
        self.unit_price = unit_price

class Customer:
    def __init__(self, customer_id, name, address, contact_number):
        self.customer_id = customer_id
        self.name = name
        self.address = address
        self.contact_number = contact_number

class Order:
    order_id_counter = 1

    def __init__(self, pizza, quantity, customer):
        self.order_id = Order.order_id_counter
        Order.order_id_counter += 1
        self.pizza = pizza
        self.quantity = quantity
        self.customer = customer

    def calculate_amount(self):
        return self.pizza.unit_price * self.quantity

class PizzaOrderSystem:
    def __init__(self):
        self.orders = []  # Binary Search Tree can be used here.

    def place_order(self, pizza, quantity, customer):
        order = Order(pizza, quantity, customer)
        self.orders.append(order)

    def view_order_details(self):
        for order in self.orders:
            amount = order.calculate_amount()
            print(f"OrderID: {order.order_id}, Pizza: {order.pizza.pizza_code}, "
                  f"Quantity: {order.quantity}, Amount: {amount}")

    def modify_order(self, order_id, new_quantity):
        for order in self.orders:
            if order.order_id == order_id:
                order.quantity = new_quantity

    def delete_order(self, order_id):
        self.orders = [order for order in self.orders if order.order_id != order_id]

# Sample usage
system = PizzaOrderSystem()

pizza1 = Pizza("P1", "Cheese", "Large", 15.99)
customer1 = Customer(1, "John", "123 Main St", "555-1234")

system.place_order(pizza1, 2, customer1)
system.view_order_details()

system.modify_order(1, 3)
system.view_order_details()

system.delete_order(1)
system.view_order_details()