generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = "-1"
  interface            = "sync"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               String             @id @default(cuid())
  fullName         String?
  email            String?            @unique
  nric_passport    String?            @unique
  dateOfBirth      DateTime?
  contactNo        String?
  password         String?
  countryOfOrigin  String?
  race             String?
  gender           Gender?            @default(PREFER_NOT_TO_SAY)
  addressLine1     String?
  addressLine2     String?
  city             String?
  state            String?
  postcode         String?
  country          String?
  patient          Patient[]
  clinicAdmin      ClinicAdmin[]
  doctor           Doctor[]
  govHealthOfficer GovHealthOfficer[]
}

model Patient {
  id             String              @id @default(cuid())
  userId         String
  healthRecordId Int
  healthRecord   PatientHealthRecord @relation(fields: [healthRecordId], references: [id], onDelete: Cascade)
  user           User                @relation(fields: [userId], references: [id])
  appointments   Appointment[]

  @@index([userId])
  @@index([healthRecordId])
}

model ClinicAdmin {
  id       String  @id @default(cuid())
  userId   String
  clinicId String?
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic   Clinic? @relation(fields: [clinicId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([clinicId])
}

model Doctor {
  id                 String               @id @default(cuid())
  employmentHistory  String?              @db.Text
  educationHistory   String?              @db.Text
  speciality         Speciality?          @default(NONE)
  userId             String
  clinicId           String?
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments       Appointment[]
  doctorApptSchedule DoctorApptSchedule[]
  clinic             Clinic?              @relation(fields: [clinicId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([clinicId])
}

model GovHealthOfficer {
  id                String         @id @default(cuid())
  userId            String
  govRegId          String         @unique
  endDate           DateTime?
  startDate         DateTime
  systemSupervising GovRegSystem[]
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Appointment {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  title           String
  desc            String
  startTime       DateTime
  endTime         DateTime
  completedAt     DateTime?
  editedAt        DateTime?      @default(now())
  status          ApptStatus     @default(PENDING)
  docAccepted     Boolean        @default(false)
  patientAccepted Boolean        @default(false)
  docAcceptAt     DateTime?
  patientAcceptAt DateTime?
  patientId       String
  doctorId        String
  patient         Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor          Doctor         @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  prescription    Prescription[]

  @@index([patientId])
  @@index([doctorId])
}

model Prescription {
  id            Int         @id @default(autoincrement())
  title         String
  desc          String
  appointmentId Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([appointmentId])
}

model DoctorApptSchedule {
  id        Int      @id @default(autoincrement())
  day       Day      @default(MONDAY)
  startTime DateTime
  endTime   DateTime
  doctorId  String
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId])
}

model Clinic {
  id                 String            @id @default(cuid())
  name               String
  address            String
  city               String
  state              String
  zip                String
  phoneNum           String
  clinicHrs          String?           @db.Text
  clinicImg          Bytes?
  admin              ClinicAdmin[]
  doctor             Doctor[]
  clinicRegistration ClinicEnrolment[]
}

model ClinicEnrolment {
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  status          EnrolmentStatus @default(PENDING)
  clinicId        String
  govRegId        String
  clinic          Clinic          @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  govRegDocSystem GovRegSystem    @relation(fields: [govRegId], references: [id], onDelete: Cascade)

  @@id([clinicId, govRegId])
  @@index([clinicId])
  @@index([govRegId])
}

model GovRegSystem {
  id                    String             @id @default(cuid())
  state                 GovRegSystem_state
  supervisingOfficer    GovHealthOfficer[]
  programmeRegistration ClinicEnrolment[]
}

model PatientHealthRecord {
  id                Int       @id @default(autoincrement())
  allergies         String?   @db.Text
  bloodType         String?   @db.Text
  currentMedication String?   @db.Text
  familyHistory     String?   @db.Text
  height            Float?    @db.Float
  pastMedication    String?   @db.Text
  pastSurgery       String?   @db.Text
  weight            Float?    @db.Float
  Patient           Patient[]
}

model doctorPrescription {
  id        Int    @id @default(autoincrement())
  name      String
  contact   String
  email     String
  age       Int
  gender    String
  ic_number String
  medicine  String
  symptoms  String
  allergies String
  date      String
  time      String
  duration  String
  details   String
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum Speciality {
  GENERAL_PRACTICE
  DERMATOLOGY
  CARDIOLOGY
  GYNAECOLOGY
  NEUROLOGY
  OPHTHALMOLOGY
  ORTHOPAEDICS
  PAEDIATRICS
  UROLOGY
  OTHER
  NONE
}

enum ApptStatus {
  PENDING
  CONFIRMED
  ONGOING
  CANCELLED
  COMPLETED
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum EnrolmentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum GovRegSystem_state {
  JOHOR
  KEDAH
  KELANTAN
  MELAKA
  NEGERI_SEMBILAN
  PAHANG
  PERAK
  PERLIS
  PULAU_PINANG
  SABAH
  SARAWAK
  SELANGOR
  TERENGGANU
  WILAYAH_PERSEKUTUAN
}
