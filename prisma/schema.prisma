generator client {
    provider             = "prisma-client-py"
    interface            = "sync"
    recursive_type_depth = "-1"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Translating this from a university environment
// to a Call-a-Doctor consultancy service
// A user can be a patient, doctor, clinicadmin, or sysadmin
// A larger organization is known as the Government Registered Doctor system.
// Clinic entity - Needs to know who is admin, who is doctor
// Appointment/Consultation entity - Needs to know who is patient, who is doctor, which clinic
// Prescription - Patient, Doctor, Clinic, Appointment

model User {
    id               String             @id @default(cuid())
    fullName         String
    email            String             @unique
    password         String
    contactNo        String
    patient          Patient[]
    clinicAdmin      ClinicAdmin[]
    doctor           Doctor[]
    govHealthOfficer GovHealthOfficer[]
}

model Patient {
    id             String        @id @default(cuid())
    // Biodata
    firstName      String
    lastName       String
    dateOfBirth    DateTime
    gender         Gender
    // Contact
    patientAddress String?
    city           String?
    state          String?
    zip            String?
    userId         String
    user           User          @relation(fields: [userId], references: [id])
    appointments   Appointment[]

    @@index([userId])
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

model ClinicAdmin {
    id       String  @id @default(cuid())
    user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    clinic   Clinic? @relation(fields: [clinicId], references: [id], onDelete: SetNull)
    clinicId String?

    @@index([userId])
    @@index([clinicId])
}

model Doctor {
    id        String @id @default(cuid())
    // Biodata
    firstName String
    lastName  String
    gender    Gender

    // Doctor details
    speciality         Speciality?          @default(NONE)
    // TODO: Add Valid License
    user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String
    appointments       Appointment[]
    doctorApptSchedule DoctorApptSchedule[]

    clinic   Clinic? @relation(fields: [clinicId], references: [id], onDelete: SetNull)
    clinicId String?

    @@index([userId])
    @@index([clinicId])
}

model GovHealthOfficer {
    id       String @id @default(cuid())
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    govRegId String

    @@index([userId])
    @@index([govRegId])
}

enum Speciality {
    GENERAL_PRACTICE
    DERMATOLOGY
    CARDIOLOGY
    GYNAECOLOGY
    NEUROLOGY
    OPHTHALMOLOGY
    ORTHOPAEDICS
    PAEDIATRICS
    UROLOGY
    OTHER
    NONE
}

model Appointment {
    id        Int      @id @default(autoincrement())
    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // Appt Details

    title           String
    desc            String
    startTime       DateTime
    endTime         DateTime
    completedAt     DateTime?
    editedAt        DateTime?  @default(now())
    status          ApptStatus @default(PENDING)
    docAccepted     Boolean    @default(false)
    patientAccepted Boolean    @default(false)
    docAcceptAt     DateTime?
    patientAcceptAt DateTime?

    // Details Of Parties Involved  
    patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
    patientId String

    doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    doctorId String

    // No need for clinic because doctor is already linked to clinic
    // Many prescriptions per appointment
    prescription Prescription[]

    @@index([patientId])
    @@index([doctorId])
}

enum ApptStatus {
    PENDING
    CONFIRMED
    CANCELLED
    COMPLETED
}

// TODO: Maybe a daily prescription update?
model Prescription {
    id            Int         @id @default(autoincrement())
    // Prescription Details
    title         String
    desc          String
    // Patient can update prescription
    // TODO: Add Valid Prescripition Image
    appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
    appointmentId Int

    @@index([appointmentId])
}

model DoctorApptSchedule {
    id        Int      @id @default(autoincrement())
    day       Day      @default(MONDAY)
    startTime DateTime
    endTime   DateTime
    doctorId  String
    doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

    @@index([doctorId])
}

enum Day {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

model Clinic {
    id                 String            @id @default(cuid())
    name               String
    address            String
    city               String
    state              String
    zip                String
    phoneNum           String
    govRegId           String?
    govRegDocSystem    GovRegSystem?     @relation(fields: [govRegId], references: [id], onDelete: SetNull)
    admin              ClinicAdmin[]
    doctor             Doctor[]
    // No need for appointment because it is already linked to doctor
    clinicRegistration ClinicEnrolment[]

    @@index([govRegId])
}

model ClinicEnrolment {
    id              String          @id @default(cuid())
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    status          EnrolmentStatus @default(PENDING)
    clinicId        String
    clinic          Clinic          @relation(fields: [clinicId], references: [id], onDelete: Cascade)
    govRegId        String
    govRegDocSystem GovRegSystem    @relation(fields: [govRegId], references: [id], onDelete: Cascade)

    @@index([clinicId])
    @@index([govRegId])
}

enum EnrolmentStatus {
    PENDING
    APPROVED
    REJECTED
}

model GovRegSystem {
    id               String           @id @default(cuid())
    typeOfSystem     TypeOfSystem
    healthcareSystem HealthcareSystem

    clinic                Clinic[]
    programmeRegistration ClinicEnrolment[]
}

enum TypeOfSystem {
    CLINIC
    HOSPITAL
    PHARMACY
    OTHER
}

enum HealthcareSystem {
    GOVERNMENT
    PRIVATE
    OTHER
}
